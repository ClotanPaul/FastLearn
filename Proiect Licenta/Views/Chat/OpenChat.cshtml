@model ProiectLicenta.Data.Models.Chat

<style>
    .message-container {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
    }

    .message-left {
        align-items: flex-end;
    }

    .message-right {
        align-items: flex-start;
    }

    .message-sender-info {
        margin-bottom: 5px;
    }

    .message-content {
        max-width: 70%;
        padding: 10px;
        border-radius: 10px;
        overflow: hidden;
        text-overflow: ellipsis
    }

    .card{
        border-width:1px;
    }

    .message-left .message-content {
        background-color: #d0f0c0;
    }

    .message-right .message-content {
        background-color: #d0d0f0;
    }

    .card-body {
        min-height: 200px;
        max-height: 400px;
        overflow-y: auto;
    }

    .form-horizontal {
        padding: 20px;
        border-radius: 5px;
        margin: auto;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .btn-default {
        background-color: #007bff;
        color: #fff;
        border: none;
        transition: background-color 0.2s ease;
    }

        .btn-default:hover {
            background-color: #0056b3;
        }

    #h3 {
        margin-top: 40px;
        text-align: center;
        margin-bottom: 30px;
    }

    #info-box {
        background: #f8f9fa;
        padding: 20px;
        margin-bottom: 25px;
        border-radius: 10px;
        width: 818px;
        text-align: left;
        padding-left: 30px;
        border: 1.5px solid #696767;
        padding-bottom: 0px;
        padding-top: 20px;
        padding-right: 30px;
        padding-bottom: 15px;
    }

    .form-control.text-area {
        width: 300px;
        height: 50px;
        max-height: 70px;
        max-width: 300px;
        white-space: pre-wrap;
        overflow-wrap: break-word;
        text-overflow: ellipsis ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }

    .btn {
        margin-right: 20px;
    }

    #button-line {
        width: 1026px;
        margin-left: -31px;
        margin-bottom: 20px;
        border-top: none;
        border-bottom: 0.1rem groove #696767;
        margin-top: 0px;
        padding-top: 10px;
        margin-bottom: 15px;
        padding-top: 0px;
    }

    .btn-right {
        margin-left: 160px;
        margin-right: 0px;
    }

    .btn-left {
        margin-right: 160px;
    }

    .btn-right2 {
        margin-left: 300px;
        margin-right: 0px;
    }

    .btn-left2 {
        margin-right: 300px;
    }

    .question-container {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        border: 1.5px solid #696767;
    }

    .card-footer {
        display: flex;
    }

    #newMessage {
        width: 655px;
        max-width: 1000px;
    }

    .answer-container {
        margin-left: 20px;
        color: #000000;
    }

    .row {
        display: none;
    }
</style>
<h3 id="h3">
    Chat<br>
    Topic: @Model.Topic
</h3>
<center>
    <div id="info-box">
        <form method="post" action="@Url.Action("AddMessage", "Message")">
            @Html.AntiForgeryToken()

            <div style="display: flex;justify-content: center;" class="row d-flex justify-content-center">
                <div style=" width: 100%;" class="col-md-10 col-xl-6">
                    <div class="card" id="chat2">
                        <div class="card-body" data-mdb-perfect-scrollbar="true" style="position: relative; height: 400px">
                            @if (Model.ChatMessages != null && Model.ChatMessages.Count > 0)
                            {
                                string previousSender = string.Empty;

                                foreach (var message in Model.ChatMessages)
                                {
                                    string senderRole = (message.UserId == Model.StudentId) ? "Student" : "Helping Student";
                                    string senderEmail = (message.UserId == Model.StudentId) ? Model.Student.Email : Model?.HelpingStudent?.Email ?? "NotDefined";
                                    bool showSenderInfo = (previousSender != senderEmail);

                                    <div style="display: flex;justify-content: @(message.UserId == Model.StudentId ? "flex-start" : "flex-end");" class="message-container @(message.UserId == Model.StudentId ? "message-left" : "message-right")">
                                        @if (showSenderInfo)
                                        {
                                            <div class="message-sender-info">
                                                <p class="small text-muted">@senderRole: @senderEmail</p>
                                            </div>
                                        }
                                        <div class="message-content">
                                            <p class="mb-1">@message.MessageContent</p>
                                            <p class="small text-muted">@message.TimeStamp.ToString("HH:mm")</p>
                                            @if (Context.User.Identity.Name == senderEmail && !Model.IssueSolved)
                                            {
                                                @Html.ActionLink("Edit", "EditMessage", "Message", new { messageId = message.MessageId }, new { @class = "small text-muted" }) <text> | </text>
                                                @Html.ActionLink("Delete", "DeleteMessage", "Message", new { messageId = message.MessageId }, new { @class = "small text-muted" })
                                            }

                                        </div>
                                    </div>

                                    previousSender = senderEmail;
                                }
                            }
                            else
                            {
                                <h4>No chat history.</h4>
                            }
                        </div>
                        @if (Model.IssueSolved == false && (Context.User.Identity.Name == Model.Student.Email || (Model?.HelpingStudent?.Email != null && Context.User.Identity.Name == Model?.HelpingStudent?.Email)))
                        {
                            <div class="card-footer text-muted d-flex justify-content-start align-items-center p-3" style="margin-top: 3px;">
                                <input type="text" class="form-control" id="newMessage" name="newMessage" placeholder="Type message">
                                <input type="hidden" name="chatId" value="@Model.ChatId" />
                                <button type="submit" style="margin-right: 0px; margin-left: 5px;" class="btn btn-primary ms-auto">Send</button>
                            </div>
                        }
                    </div>
                </div>
            </div>

        </form>
        <center>
            @if (User.Identity.IsAuthenticated && (string)ViewData["isStudent"] == "true" && Model.IssueSolved == false)
            {
                @Html.ActionLink("IssueSolved", "ProblemSolved", "Users", new { chatId = Model.ChatId }, new { @class = "btn btn-primary" })
                
            }
            @Html.ActionLink("Chats", "Index", "Chat", null, new { @class = "btn btn-primary" })
        </center>
    </div>
    </center>





